library(randomForest)
library(gdata)
library(ggplot2)
library(gridExtra)
load("~/Dropbox/School/RandomForest Paper/Data/WorkspaceJan16.RData")
keep(list="HK_Percentile", sure=TRUE)
HK_Percentile = HK_Percentile[,c(1:45, 47:89, 91:133, 135:177, 179:182)]
HK_Percentile_Complete = na.omit(HK_Percentile)
# write.csv(HK_Percentile_Complete, file="HK_Percentile_Complete.csv")
simpleRF = randomForest(T13_Percentile ~ . -T12_Percentile - T6_Percentile -ID -Intervention, data=HK_Percentile_Complete)
RFPred = as.numeric(predict(object=simpleRF, newdata=HK_Percentile_Complete))
# BmiPreds = as.numeric(predict(object=simpleRF, newdata=HK_Percentile_Complete, predict.all=TRUE)$individual)
#   BmiPreds = as.numeric(predict(object=simpleRF, newdata=HK_Percentile_Complete[1,], predict.all=TRUE)$individual)
#   boxplot(BmiPreds ~ as.factor(rep(HK_Percentile_Complete[1, var], each=500)),
#           xlab=names(HK_Percentile_Complete)[var],
#           ylab="Predicted T13 BMI Percentile")
plots = list()
for(i in 3:(ncol(HK_Percentile_Complete)-3) ){
if(i == 167){
plots[[i-2]] = ggplot(data.frame(RFPred, x = HK_Percentile_Complete[,i]), aes(x, RFPred)) +
geom_point() + xlab(names(HK_Percentile_Complete)[i]) + ylab("Pred T13 BMI %ile") + ylim(0, 100)
} else{
plots[[i-2]] = ggplot(data.frame(RFPred, x = HK_Percentile_Complete[,i]), aes(x, RFPred)) +
geom_point() + geom_smooth(se=F) + xlab(names(HK_Percentile_Complete)[i]) +
ylab("Pred T13 BMI %ile") + ylim(0, 100)
}
save(plots, file="plots.RData")
plot(simpleRF)
importance(simpleRF)
plot(importance(simpleRF))
importances = importance(simpleRF)
importances
sort(importances)
importances[order(importances)]
importances/max(importances)
simpleRF
?randomForest
dim(HK_Percentile_Complete)
178/3
simpleRF = randomForest(T13_Percentile ~ . -T12_Percentile - T6_Percentile -ID -Intervention,
data=HK_Percentile_Complete, corr.bias=TRUE)
RFPred = as.numeric(predict(object=simpleRF, newdata=HK_Percentile_Complete))
importances = importance(simpleRF)
importances/max(importances)
importances = importances/max(importances)
importances
class(importances)
data.frame(rownames(importances), importances)
importances = data.frame(rownames(importances), importances)
importances = importance(simpleRF)/max(importance(simpleRF))
importances = data.frame(rownames(importances), importances)
importances[order(importances$IncNodePurity),]
imp = importances[order(importances$IncNodePurity),]
rownames(imp) = NULL
imp
importances = data.frame(Variable = rownames(importances), imp = importances)
imp = importances[order(importances$imp),]
importances = data.frame(Variable = rownames(importances), imp = importances)
importances
importances = importance(simpleRF)/max(importance(simpleRF))
importances = data.frame(Variable = rownames(importances), imp = importances)
importances = importance(simpleRF)/max(importance(simpleRF))
importances = data.frame(Variable = rownames(importances), Imp = importances)
importances$IncNodePurity
importances = importance(simpleRF)/max(importance(simpleRF))
importances = data.frame(Variable = rownames(importances), Imp = importances$IncNodePurity)
importances = importance(simpleRF)/max(importance(simpleRF))
importances
importances = data.frame(Variable = rownames(importances), Imp = importances)
importances
importances = importance(simpleRF)/max(importance(simpleRF))
importances = data.frame(Variable = rownames(importances), importances)
importances
imp = importances[order(importances$),]
imp = importances[order(importances$IncNodePurity),]
rownames(imp) = NULL
imp
importances = importance(simpleRF)/max(importance(simpleRF))
importances = data.frame(Variable = rownames(importances), importances)
imp = importances[order(-importances$IncNodePurity),]
rownames(imp) = NULL
imp
plot(IncNodePurity~Var ,data=imp)
names(imp)
plot(IncNodePurity~Variable ,data=imp)
plot(IncNodePurity~Variable ,data=imp[1:10,])
stripchart(IncNodePurity, data=imp[1:10,])
with(imp[1:10,], stripchart(IncNodePurity))
varImpPlot(simpleRF)
varImpPlot(simpleRF, n.var = 10)
varImpPlot(simpleRF, n.var=15)
varImpPlot(simpleRF, n.var=10)
varImpPlot(simpleRF, n.var=10, scale = TRUE)
varImpPlot(simpleRF, n.var=10, scale = FALSE)
?varImpPlot(simpleRF, n.var=10)
varImpPlot(simpleRF, n.var=10, type=1)
varImpPlot(simpleRF, n.var=10, type=2)
varImpPlot(simpleRF, n.var=10)
designMat = model.matrix( ~ . -T12_Percentile - T6_Percentile -ID -Intervention, data=HK_Percentile_Complete)
tuneRF(x = designMat, y=HK_Percentile_Complete$T13_Percentile)
?tuneRF
simpleRF = tuneRF(x = designMat, y=HK_Percentile_Complete$T13_Percentile, doBest=TRUE)
RFPred = as.numeric(predict(object=simpleRF, newdata=HK_Percentile_Complete))
simpleRF
simpleRF = tuneRF(x = designMat, y=HK_Percentile_Complete$T13_Percentile, doBest=TRUE, ntreeTry = 1000)
RFPred = as.numeric(predict(object=simpleRF, newdata=HK_Percentile_Complete))
designMat
designMat = model.matrix( ~ . -T13_Percentile -T12_Percentile - T6_Percentile -ID -Intervention, data=HK_Percentile_Complete)
simpleRF = tuneRF(x = designMat, y=HK_Percentile_Complete$T13_Percentile, doBest=TRUE, ntreeTry = 1000)
names(designMat)
colnames(designMat)
designMat = model.matrix( ~ . 0 -T13_Percentile -T12_Percentile - T6_Percentile -ID -Intervention, data=HK_Percentile_Complete)
simpleRF = tuneRF(x = designMat, y=HK_Percentile_Complete$T13_Percentile, doBest=TRUE, ntreeTry = 1000)
designMat = model.matrix( ~ . -1 -T13_Percentile -T12_Percentile - T6_Percentile -ID -Intervention, data=HK_Percentile_Complete)
simpleRF = tuneRF(x = designMat, y=HK_Percentile_Complete$T13_Percentile, doBest=TRUE, ntreeTry = 1000)
RFPred = as.numeric(predict(object=simpleRF, newdata=HK_Percentile_Complete))
simpleRF
?tuneRF
simpleRF = tuneRF(x = designMat, y=HK_Percentile_Complete$T13_Percentile, doBest=TRUE, ntree=1000)
simpleRF
?randomForest
simpleRF = tuneRF(x = designMat, y=HK_Percentile_Complete$T13_Percentile, doBest=TRUE, ntree=1000, importance=TRUE)
simpleRF
rm(simpleRF)
simpleRF = tuneRF(x = designMat, y=HK_Percentile_Complete$T13_Percentile, doBest=TRUE, ntree=1000, importance=TRUE)
simpleRF
simpleRF = tuneRF(x = designMat, y=HK_Percentile_Complete$T13_Percentile, doBest=TRUE, nTree=1000, importance=TRUE)
simpleRF
simpleRF = tuneRF(x = designMat, y=HK_Percentile_Complete$T13_Percentile, doBest=TRUE)
simpleRF
RFPred = as.numeric(predict(object=simpleRF, newdata=HK_Percentile_Complete))
plots = list()
for(i in 3:(ncol(HK_Percentile_Complete)-3) ){
if(i == 167){
plots[[i-2]] = ggplot(data.frame(RFPred, x = HK_Percentile_Complete[,i]), aes(x, RFPred)) +
geom_point() + xlab(names(HK_Percentile_Complete)[i]) + ylab("Pred T13 BMI %ile") + ylim(0, 100)
} else{
plots[[i-2]] = ggplot(data.frame(RFPred, x = HK_Percentile_Complete[,i]), aes(x, RFPred)) +
geom_point() + geom_smooth(se=F) + xlab(names(HK_Percentile_Complete)[i]) +
ylab("Pred T13 BMI %ile") + ylim(0, 100)
}
save(plots, file="plots.RData")
varImpPlot(simpleRF, n.var=10)
ls()
HK_Percentile_Complete
names(HK_Percentile_Complete)
ObesityModel = formula(T13_Percentile~.-T12_Percentile -T6_Percentile -ID -Intervention, data=HK_Percentile_Complete)
library(caret)
library(doMC)
library(Metrics)
library(pROC)
library(parallel)
twoClassSummaryCustom = function(data, lev = NULL, model = NULL) {
rocObject <- try(pROC::roc(data$obs, data[, lev[1]]), silent = TRUE)
rocAUC <- ifelse(class(rocObject)[1] == "try-error", NA, rocObject$auc)
sens = sensitivity(data[, "pred"], data[, "obs"], lev[1])
spec = specificity(data[, "pred"], data[, "obs"], lev[2])
ppv = posPredValue(data[,"pred"], reference = data[,"obs"])
BalancedAccuracy = mean(c(sens, spec))
F1 = 2 * (ppv * sens) / (ppv+sens)
out <- c(F1, BalancedAccuracy, rocAUC, sens, spec)
names(out) <- c("F1", "BalancedAccuracy", "AUC", "Sens", "Spec")
out
}
CVctrl = trainControl(method='cv', number=5, classProbs=TRUE, summaryFunction=twoClassSummaryCustom)
registerDoMC(detectCores())
ObesityModel = formula(T13_Percentile~.-T12_Percentile -T6_Percentile -ID -Intervention, data=HK_Percentile_Complete)
GLMNet_Grid = expand.grid(alpha=c(seq(0, .1, .001), seq(.9, 1,.001)), lambda=seq(0,.1,.01))
fitGLMNet_BA = train(ObesityModel, data = bigTrain2011_2013, method = "glmnet", trControl = CVctrl, metric = 'BalancedAccuracy', preProc=c("center","scale"), tuneGrid = GLMNet_Grid)
dim(HK_Percentile_Complete)
GLMNet_Grid = expand.grid(alpha=c(seq(0, .1, .001), seq(.9, 1,.001)), lambda=seq(0,.1,.01))
fitGLMNet_BA = train(ObesityModel, data = HK_Percentile_Complete, method = "glmnet", trControl = CVctrl, metric = 'BalancedAccuracy', preProc=c("center","scale"), tuneGrid = GLMNet_Grid)
fitGLMNet_AUC = train(ObesityModel, data = HK_Percentile_Complete, method = "glmnet", trControl = CVctrl, metric = 'AUC', preProc=c("center","scale"), tuneGrid = GLMNet_Grid)
ObesityModel = formula(as.factor(T13_Percentile>85)~.-T12_Percentile -T6_Percentile -ID -Intervention, data=HK_Percentile_Complete)
ObesityModel = formula(as.factor(T13_Percentile>85)~.-T13_Percentile -T12_Percentile -T6_Percentile -ID -Intervention, data=HK_Percentile_Complete)
GLMNet_Grid = expand.grid(alpha=c(seq(0, .1, .001), seq(.9, 1,.001)), lambda=seq(0,.1,.01))
fitGLMNet_BA = train(ObesityModel, data = HK_Percentile_Complete, method = "glmnet", trControl = CVctrl, metric = 'BalancedAccuracy', preProc=c("center","scale"), tuneGrid = GLMNet_Grid)
library(glmnet)
ObesityX = model.matrix(~.-T13_Percentile -T12_Percentile -T6_Percentile -ID -Intervention, data=HK_Percentile_Complete)
ObesityY = as.factor(HK_Percentile_Complete$T13_Percentile>85, labels=c("Normal", "Overweight"))
ObesityY = as.factor(HK_Percentile_Complete$T13_Percentile>85, levels=c("Normal", "Overweight"))
ObesityY = factor(HK_Percentile_Complete$T13_Percentile>85, labels=c("Normal", "Overweight"))
ObesityY
HK_Percentile_Complete$T13_Percentile
cv.glmnet(ObesityX, ObesityY)
cv.glmnet(ObesityX, as.numeric(HK_Percentile_Complete$T13_Percentile>85))
lambda.CV = cv.glmnet(ObesityX, as.numeric(HK_Percentile_Complete$T13_Percentile>85))
glmnet(x = ObesityX, y = ObesityY, family = "binomial", alpha = 1, lambda = lambda.CV$lambda.1se)
coef(glmnet(x = ObesityX, y = ObesityY, family = "binomial", alpha = 1, lambda = lambda.CV$lambda.1se))
ObesityX = model.matrix(~.-1 -T13_Percentile -T12_Percentile -T6_Percentile -ID -Intervention, data=HK_Percentile_Complete)
ObesityY = factor(HK_Percentile_Complete$T13_Percentile>85, labels=c("Normal", "Overweight"))
ObesityX = model.matrix(~.-1 -T13_Percentile -T12_Percentile -T6_Percentile -ID -Intervention, data=HK_Percentile_Complete)
ObesityY = factor(HK_Percentile_Complete$T13_Percentile>85, labels=c("Normal", "Overweight"))
library(glmnet)
lambda.CV = cv.glmnet(ObesityX, as.numeric(HK_Percentile_Complete$T13_Percentile>85), parallel = TRUE)
lambda.CV
coef(glmnet(x = ObesityX, y = ObesityY, family = "binomial", alpha = 1, lambda = lambda.CV$lambda.min))
coef(glmnet(x = ObesityX, y = ObesityY, family = "binomial", alpha = .9, lambda = lambda.CV$lambda.min))
GLMNet_Grid = expand.grid(alpha=c(seq(0, .1, .001), seq(.9, 1,.001)), lambda=seq(0,.1,.01))
fitGLMNet_BA = train(ObesityModel, data = HK_Percentile_Complete, method = "glmnet", trControl = CVctrl, metric = 'BalancedAccuracy', preProc=c("center","scale"), tuneGrid = GLMNet_Grid)
GLMNet_Grid = expand.grid(alpha=c(seq(0, .1, .01), seq(.9, 1,.01)), lambda=seq(0,.1,.01))
fitGLMNet_BA = train(ObesityModel, data = HK_Percentile_Complete, method = "glmnet", trControl = CVctrl, metric = 'BalancedAccuracy', preProc=c("center","scale"), tuneGrid = GLMNet_Grid)
fitGLMNet_AUC = train(ObesityModel, data = HK_Percentile_Complete, method = "glmnet", trControl = CVctrl, metric = 'AUC', preProc=c("center","scale"), tuneGrid = GLMNet_Grid)
fitGLMNet_AUC
ls()
lambda.CV
RF_Grid = expand.grid(mtry=seq(10, 178, 5))
fitRF_BA = train(ObesityModel, data = HK_Percentile_Complete, method = "rf",  trControl = CVctrl, metric = 'BalancedAccuracy', importance=TRUE, preProc=c("center","scale"), tuneGrid = RF_Grid)
fitRF_AUC = train(ObesityModel, data = HK_Percentile_Complete, method = "rf",  trControl = CVctrl, metric = 'AUC', importance=TRUE, preProc=c("center","scale"), tuneGrid = RF_Grid)
GBM_Grid = expand.grid(n.trees = seq(1, 300, 50), interaction.depth = 2:3, shrinkage=seq(0, 1, .1), n.minobsinnode = seq(10, 50, 10))
fitGBM_BA = train(ObesityModel, data = HK_Percentile_Complete, method = "gbm", trControl = CVctrl, metric = 'BalancedAccuracy', preProc=c("center","scale"), tuneGrid = GBM_Grid, verbose=FALSE)
fitGBM_AUC = train(ObesityModel, data = HK_Percentile_Complete, method = "gbm", trControl = CVctrl, metric = 'AUC', preProc=c("center","scale"), tuneGrid = GBM_Grid, verbose=FALSE)
plot(roc(as.factor(HK_Percentile_Complete$T13_Percentile>85) ~ predict(fitGLMNet_AUC, HK_Percentile_Complete, type='prob')$Present), col='blue', xlim=c(1,0))
as.factor(HK_Percentile_Complete$T13_Percentile>85)
predict(fitGLMNet_AUC, HK_Percentile_Complete, type='prob')
names(HK_Percentile_Complete)
plot(roc(as.factor(HK_Percentile_Complete$T13_Percentile>85) ~ predict(fitGLMNet_AUC, HK_Percentile_Complete[,3:174], type='prob')$Present), col='blue', xlim=c(1,0))
HK_Percentile_Complete$T13_Overwt = factor(T13_Percentile>85, labels=c("Normal", "Overweight"))
HK_Percentile_Complete$T13_Overwt = factor(HK_Percentile_Complete$T13_Percentile>85, labels=c("Normal", "Overweight"))
ObesityModel = formula(T13_Overwt ~., data=HK_Percentile_Complete[,c(3:174, 179)])
RF_Grid = expand.grid(mtry=seq(10, 178, 5))
GLMNet_Grid = expand.grid(alpha=c(seq(0, .1, .01), seq(.9, 1,.01)), lambda=seq(0,.1,.01))
fitGLMNet_BA = train(ObesityModel, data = HK_Percentile_Complete, method = "glmnet", trControl = CVctrl, metric = 'BalancedAccuracy', preProc=c("center","scale"), tuneGrid = GLMNet_Grid)
fitGLMNet_BA = train(ObesityModel, data = HK_Percentile_Complete[,c(3:174, 179)], method = "glmnet", trControl = CVctrl, metric = 'BalancedAccuracy', preProc=c("center","scale"), tuneGrid = GLMNet_Grid)
fitGLMNet_AUC = train(ObesityModel, data = HK_Percentile_Complete[,c(3:174, 179)], method = "glmnet", trControl = CVctrl, metric = 'AUC', preProc=c("center","scale"), tuneGrid = GLMNet_Grid)
plot(roc(HK_Percentile_Complete$T13_Overwt ~ predict(fitGLMNet_AUC, HK_Percentile_Complete[,3:174], type='prob')$Present), col='blue', xlim=c(1,0))
predict(fitGLMNet_AUC, HK_Percentile_Complete[,3:174], type='prob')
plot(roc(HK_Percentile_Complete$T13_Overwt ~ predict(fitGLMNet_AUC, HK_Percentile_Complete[,3:174], type='prob')$Overweight), col='blue', xlim=c(1,0))
plot(roc(HK_Percentile_Complete$T13_Overwt ~ predict(fitGLMNet_BA, HK_Percentile_Complete[,3:174], type='prob')$Overweight), col='red', add=TRUE) #GLM ROC
fitGLMNet_BA
confusionMatrix((fitGLMNet_BA))
CVctrl = trainControl(method='cv', number=10, classProbs=TRUE, summaryFunction=twoClassSummaryCustom)
RF_Grid = expand.grid(mtry=seq(10, 178, 5))
fitRF_BA = train(ObesityModel, data = HK_Percentile_Complete[,c(3:174, 179)], method = "rf",  trControl = CVctrl, metric = 'BalancedAccuracy', importance=TRUE, preProc=c("center","scale"), tuneGrid = RF_Grid)
fitRF_AUC = train(ObesityModel, data = HK_Percentile_Complete[,c(3:174, 179)], method = "rf",  trControl = CVctrl, metric = 'AUC', importance=TRUE, preProc=c("center","scale"), tuneGrid = RF_Grid)
fitRF_BA
plot(roc(HK_Percentile_Complete$T13_Overwt ~ predict(fitGLMNet_AUC, HK_Percentile_Complete[,3:174], type='prob')$Overweight), col='blue', xlim=c(1,0))
plot(roc(HK_Percentile_Complete$T13_Overwt ~ predict(fitGLMNet_BA, HK_Percentile_Complete[,3:174], type='prob')$Overweight), col='red', add=TRUE) #GLM ROC
plot(roc(HK_Percentile_Complete$T13_Overwt ~ predict(fitRF_AUC, HK_Percentile_Complete[,3:174], type='prob')$Overweight), col='orange', add=TRUE) #RandomForest ROC
plot(roc(HK_Percentile_Complete$T13_Overwt ~ predict(fitRF_BA, HK_Percentile_Complete[,3:174], type='prob')$Overweight), col='orange', add=TRUE) #RandomForest ROC
plot(roc(HK_Percentile_Complete$T13_Overwt ~ predict(fitGBM_AUC, HK_Percentile_Complete[,3:174], type='prob')$Overweight), col='green', add=TRUE) #GBM ROC
fitGBM_BA = train(ObesityModel, data = HK_Percentile_Complete[,c(3:174, 179)], method = "gbm", trControl = CVctrl, metric = 'BalancedAccuracy', preProc=c("center","scale"), tuneGrid = GBM_Grid, verbose=FALSE)
fitGBM_AUC = train(ObesityModel, data = HK_Percentile_Complete[,c(3:174, 179)], method = "gbm", trControl = CVctrl, metric = 'AUC', preProc=c("center","scale"), tuneGrid = GBM_Grid, verbose=FALSE)
plot(roc(HK_Percentile_Complete$T13_Overwt ~ predict(fitGBM_AUC, HK_Percentile_Complete[,3:174], type='prob')$Overweight), col='green', add=TRUE) #GBM ROC
plot(roc(HK_Percentile_Complete$T13_Overwt ~ predict(fitGBM_BA, HK_Percentile_Complete[,3:174], type='prob')$Overweight), col='green', add=TRUE) #GBM ROC
confusionMatrix(fitRF_BA)
confusionMatrix(fitRF_AUC)
confusionMatrix(fitGLMNet_BA)
confusionMatrix(fitGLMNet_AUC)
varImp(fitRF_BA)
HK_Percentile_Complete[,c(3:174, 179)]
names(HK_Percentile_Complete[,c(3:174, 179)])
HK_Percentile_Complete$T13_Overwt = factor(HK_Percentile_Complete$T13_Percentile>85, labels=c("Normal", "Overweight"))
ObesityModel = formula(T13_Overwt ~., data=HK_Percentile_Complete[,c(3:175, 179)])
GLMNet_Grid = expand.grid(alpha=c(seq(0, .1, .01), seq(.9, 1,.01)), lambda=seq(0,.1,.01))
fitGLMNet_BA = train(ObesityModel, data = HK_Percentile_Complete[,c(3:175, 179)], method = "glmnet", trControl = CVctrl, metric = 'BalancedAccuracy', preProc=c("center","scale"), tuneGrid = GLMNet_Grid)
fitGLMNet_AUC = train(ObesityModel, data = HK_Percentile_Complete[,c(3:175, 179)], method = "glmnet", trControl = CVctrl, metric = 'AUC', preProc=c("center","scale"), tuneGrid = GLMNet_Grid)
175/3
RF_Grid = expand.grid(mtry=seq(55, 175, 5))
fitRF_BA = train(ObesityModel, data = HK_Percentile_Complete[,c(3:175, 179)], method = "rf",  trControl = CVctrl, metric = 'BalancedAccuracy', importance=TRUE, preProc=c("center","scale"), tuneGrid = RF_Grid)
fitRF_AUC = train(ObesityModel, data = HK_Percentile_Complete[,c(3:175, 179)], method = "rf",  trControl = CVctrl, metric = 'AUC', importance=TRUE, preProc=c("center","scale"), tuneGrid = RF_Grid)
GBM_Grid = expand.grid(n.trees = seq(1, 300, 50), interaction.depth = 2:3, shrinkage=seq(0, 1, .1), n.minobsinnode = seq(10, 50, 10))
fitGBM_BA = train(ObesityModel, data = HK_Percentile_Complete[,c(3:175, 179)], method = "gbm", trControl = CVctrl, metric = 'BalancedAccuracy', preProc=c("center","scale"), tuneGrid = GBM_Grid, verbose=FALSE)
fitGBM_AUC = train(ObesityModel, data = HK_Percentile_Complete[,c(3:175, 179)], method = "gbm", trControl = CVctrl, metric = 'AUC', preProc=c("center","scale"), tuneGrid = GBM_Grid, verbose=FALSE)
fitGBM_AUC
GBM_Grid = expand.grid(n.trees = seq(1, 300, 50), interaction.depth = 1:3, shrinkage=seq(0, 1, .1), n.minobsinnode = seq(4, 50, 2))
fitGBM_BA = train(ObesityModel, data = HK_Percentile_Complete[,c(3:175, 179)], method = "gbm", trControl = CVctrl, metric = 'BalancedAccuracy', preProc=c("center","scale"), tuneGrid = GBM_Grid, verbose=FALSE)
fitGBM_BA
fitGBM_BA$bestTune
summary(fitGBM_BA)
plot(roc(HK_Percentile_Complete$T13_Overwt ~ predict(fitGLMNet_AUC, HK_Percentile_Complete[,3:175], type='prob')$Overweight), col='blue', xlim=c(1,0))
plot(roc(HK_Percentile_Complete$T13_Overwt ~ predict(fitGLMNet_BA, HK_Percentile_Complete[,3:175], type='prob')$Overweight), col='red', add=TRUE) #GLM ROC
plot(roc(HK_Percentile_Complete$T13_Overwt ~ predict(fitRF_AUC, HK_Percentile_Complete[,3:175], type='prob')$Overweight), col='orange', add=TRUE) #RandomForest ROC
plot(roc(HK_Percentile_Complete$T13_Overwt ~ predict(fitRF_BA, HK_Percentile_Complete[,3:175], type='prob')$Overweight), col='orange', add=TRUE) #RandomForest ROC
plot(roc(HK_Percentile_Complete$T13_Overwt ~ predict(fitGBM_AUC, HK_Percentile_Complete[,3:175], type='prob')$Overweight), col='green', add=TRUE) #GBM ROC
plot(roc(HK_Percentile_Complete$T13_Overwt ~ predict(fitGBM_BA, HK_Percentile_Complete[,3:175], type='prob')$Overweight), col='green', add=TRUE) #GBM ROC
confusionMatrix(fitGLMNet_AUC)
confusionMatrix(fitGLMNet_BA)
confusionMatrix(fitRF_AUC)
confusionMatrix(fitRF_BA)
names(HK_Percentile)
X = HK_Percentile[,c(3:175,178)]
X = na.omit(X)
X = HK_Percentile[,c(3:175,178)]
X = na.omit(X)
X$T13_Overwt = factor(X$T13_Percentile>85, labels=c("Normal", "Overweight"))
dim(X)
CVctrl = trainControl(method='cv', number=10, classProbs=TRUE, summaryFunction=twoClassSummaryCustom)
CVctrl = trainControl(method='repeatedcv', number=10, classProbs=TRUE, summaryFunction=twoClassSummaryCustom)
X = HK_Percentile[,c(3:175,178)]
X = na.omit(X)
X$T13_Overwt = factor(X$T13_Percentile>85, labels=c("Normal", "Overweight"))
ObesityModel = formula(T13_Overwt ~., data=X[,c(3:175, 179)])
RF_Grid = expand.grid(mtry=seq(55, 175, 5))
fitRF_BA = train(ObesityModel, data = X[,c(3:175, 179)], method = "rf",  trControl = CVctrl, metric = 'BalancedAccuracy', importance=TRUE, preProc=c("center","scale"), tuneGrid = RF_Grid)
fitRF_AUC = train(ObesityModel, data = X[,c(3:175, 179)], method = "rf",  trControl = CVctrl, metric = 'AUC', importance=TRUE, preProc=c("center","scale"), tuneGrid = RF_Grid)
RF_Grid = expand.grid(mtry=seq(55, 175, 5))
names(X)
GLMNet_Grid = expand.grid(alpha=c(seq(0, .1, .01), seq(.9, 1,.01)), lambda=seq(0,.1,.01))
RF_Grid = expand.grid(mtry=seq(55, 175, 5))
GBM_Grid = expand.grid(n.trees = seq(1, 300, 50), interaction.depth = 1:3, shrinkage=seq(0, 1, .1), n.minobsinnode = seq(4, 50, 2))
GLMNet_Grid = expand.grid(alpha=c(seq(0, .1, .01), seq(.9, 1,.01)), lambda=seq(0,.1,.01))
RF_Grid = expand.grid(mtry=seq(55, 175, 5))
GBM_Grid = expand.grid(n.trees = seq(1, 100, 25), interaction.depth = 1:2, shrinkage=seq(0, 1, .1), n.minobsinnode = seq(1, 10, 2))
fitGLMNet_BA = train(T13_Overwt~., data = X[,c(1:173, 175)], method = "glmnet", trControl = CVctrl, metric = 'BalancedAccuracy', preProc=c("center","scale"), tuneGrid = GLMNet_Grid)
fitGLMNet_AUC = train(T13_Overwt~., data = X[,c(1:173, 175)], method = "glmnet", trControl = CVctrl, metric = 'AUC', preProc=c("center","scale"), tuneGrid = GLMNet_Grid)
fitRF_BA = train(T13_Overwt~., data = X[,c(1:173, 175)], method = "rf",  trControl = CVctrl, metric = 'BalancedAccuracy', importance=TRUE, preProc=c("center","scale"), tuneGrid = RF_Grid)
fitRF_AUC = train(T13_Overwt~., data = X[,c(1:173, 175)], method = "rf",  trControl = CVctrl, metric = 'AUC', importance=TRUE, preProc=c("center","scale"), tuneGrid = RF_Grid)
fitGBM_BA = train(T13_Overwt~., data = X[,c(1:173, 175)], method = "gbm", trControl = CVctrl, metric = 'BalancedAccuracy', preProc=c("center","scale"), tuneGrid = GBM_Grid, verbose=FALSE)
fitGBM_AUC = train(T13_Overwt~., data = X[,c(1:173, 175)], method = "gbm", trControl = CVctrl, metric = 'AUC', preProc=c("center","scale"), tuneGrid = GBM_Grid, verbose=FALSE)
fitGBM_BA
plot(roc(X$T13_Overwt ~ predict(fitGLMNet_AUC, X[,3:175], type='prob')$Overweight), col='blue', xlim=c(1,0))
plot(roc(X$T13_Overwt ~ predict(fitGLMNet_AUC, X[,c(1:173, 175)], type='prob')$Overweight), col='blue', xlim=c(1,0))
plot(roc(X$T13_Overwt ~ predict(fitGLMNet_BA, X[,c(1:173, 175)], type='prob')$Overweight), col='red', add=TRUE) #GLM ROC
plot(roc(X$T13_Overwt ~ predict(fitRF_AUC, X[,c(1:173, 175)], type='prob')$Overweight), col='orange', add=TRUE) #RandomForest ROC
plot(roc(X$T13_Overwt ~ predict(fitRF_BA, X[,c(1:173, 175)], type='prob')$Overweight), col='orange', add=TRUE) #RandomForest ROC
plot(roc(X$T13_Overwt ~ predict(fitGBM_AUC, X[,c(1:173, 175)], type='prob')$Overweight), col='green', add=TRUE) #GBM ROC
plot(roc(X$T13_Overwt ~ predict(fitGBM_BA, X[,c(1:173, 175)], type='prob')$Overweight), col='green', add=TRUE) #GBM ROC
confusionMatrix(fitRF_AUC)
confusionMatrix(fitRF_BA)
library(randomForest)
library(gdata)
library(ggplot2)
library(gridExtra)
load("~/Dropbox/School/RandomForest Paper/Data/WorkspaceJan16.RData")
keep(list="HK_Percentile", sure=TRUE)
HK_Percentile = HK_Percentile[,c(1:45, 47:89, 91:133, 135:177, 179:182)]
HK_Percentile_Complete = na.omit(HK_Percentile)
# write.csv(HK_Percentile_Complete, file="HK_Percentile_Complete.csv")
designMat = model.matrix( ~ . -1 -T13_Percentile -T12_Percentile - T6_Percentile -ID -Intervention, data=HK_Percentile_Complete)
simpleRF = tuneRF(x = designMat, y=HK_Percentile_Complete$T13_Percentile, doBest=TRUE)
RFPred = as.numeric(predict(object=simpleRF, newdata=HK_Percentile_Complete))
# BmiPreds = as.numeric(predict(object=simpleRF, newdata=HK_Percentile_Complete, predict.all=TRUE)$individual)
#   BmiPreds = as.numeric(predict(object=simpleRF, newdata=HK_Percentile_Complete[1,], predict.all=TRUE)$individual)
#   boxplot(BmiPreds ~ as.factor(rep(HK_Percentile_Complete[1, var], each=500)),
#           xlab=names(HK_Percentile_Complete)[var],
#           ylab="Predicted T13 BMI Percentile")
BmiPreds = as.numeric(predict(object=simpleRF, newdata=HK_Percentile_Complete[1,], predict.all=TRUE)$individual)
simpleRF = tuneRF(x = designMat, y=HK_Percentile_Complete$T13_Percentile, doBest=TRUE)
load("~/Dropbox/School/RandomForest Paper/Data/WorkspaceJan16.RData")
load("~/Dropbox/School/RandomForest Paper/Data/HK_Percentile.RData")
keep(list="HK_Percentile", sure=TRUE)
HK_Percentile = HK_Percentile[,c(1:45, 47:89, 91:133, 135:177, 179:182)]
HK_Percentile_Complete = na.omit(HK_Percentile)
designMat = model.matrix( ~ . -1 -T13_Percentile -T12_Percentile - T6_Percentile -ID -Intervention, data=HK_Percentile_Complete)
simpleRF = tuneRF(x = designMat, y=HK_Percentile_Complete$T13_Percentile, doBest=TRUE)
RFPred = as.numeric(predict(object=simpleRF, newdata=HK_Percentile_Complete))
BmiPreds = as.numeric(predict(object=simpleRF, newdata=HK_Percentile_Complete[1,], predict.all=TRUE)$individual)
boxplot(BmiPreds ~ as.factor(rep(HK_Percentile_Complete[1, var], each=500)),
xlab=names(HK_Percentile_Complete)[var],
ylab="Predicted T13 BMI Percentile")
var
var = 1
names(HK_Percentile_Complete)
var = 175
boxplot(BmiPreds ~ as.factor(rep(HK_Percentile_Complete[1, var], each=500)),
xlab=names(HK_Percentile_Complete)[var],
ylab="Predicted T13 BMI Percentile")
BmiPreds = as.numeric(predict(object=simpleRF, newdata=HK_Percentile_Complete, predict.all=TRUE)$individual)
boxplot(BmiPreds ~ as.factor(rep(HK_Percentile_Complete[, var], each=500)),
xlab=names(HK_Percentile_Complete)[var],
ylab="Predicted T13 BMI Percentile")
importance(simpleRF)
varImpPlot(simpleRF)
i = var
ggplot(data.frame(RFPred, x = HK_Percentile_Complete[,i]), aes(x, RFPred)) +
geom_point() + geom_smooth(se=F) + xlab(names(HK_Percentile_Complete)[i]) +
ylab("Pred T13 BMI %ile") + ylim(0, 100)
names(HK_Percentile_Complete)
names(HK_Percentile)
load("~/Dropbox/School/RandomForest Paper/Data/HK_Percentile.RData")
keep(list="HK_Percentile", sure=TRUE)
HK_Percentile = HK_Percentile[,c(1:45, 175, 178)]
names(HK_Percentile)
load("~/Dropbox/School/RandomForest Paper/Data/HK_Percentile.RData")
keep(list="HK_Percentile", sure=TRUE)
names(HK_Percentile)
HK_Percentile = HK_Percentile[,c(3:46, 179, 182)]
names(HK_Percentile)
load("~/Dropbox/School/RandomForest Paper/Data/HK_Percentile.RData")
keep(list="HK_Percentile", sure=TRUE)
HK_Percentile = HK_Percentile[,c(3:45, 179, 182)]
names(HK_Percentile)
designMat = model.matrix( ~ . -1 -T13_Percentile, data=HK_Percentile_Complete)
HK_Percentile_Complete = na.omit(HK_Percentile)
designMat = model.matrix( ~ . -1 -T13_Percentile, data=HK_Percentile_Complete)
simpleRF = tuneRF(x = designMat, y=HK_Percentile_Complete$T13_Percentile, doBest=TRUE)
names(HK_Percentile_Complete)
for(i in 1:(ncol(HK_Percentile_Complete)-1) ){
if(i == 167){
plots[[i-2]] = ggplot(data.frame(RFPred, x = HK_Percentile_Complete[,i]), aes(x, RFPred)) +
geom_point() + xlab(names(HK_Percentile_Complete)[i]) + ylab("Pred T13 BMI %ile") + ylim(0, 100)
} else{
plots[[i-2]] = ggplot(data.frame(RFPred, x = HK_Percentile_Complete[,i]), aes(x, RFPred)) +
geom_point() + geom_smooth(se=F) + xlab(names(HK_Percentile_Complete)[i]) +
ylab("Pred T13 BMI %ile") + ylim(0, 100)
}
RFPred = as.numeric(predict(object=simpleRF, newdata=HK_Percentile_Complete))
BmiPreds = as.numeric(predict(object=simpleRF, newdata=HK_Percentile_Complete, predict.all=TRUE)$individual)
boxplot(BmiPreds ~ as.factor(rep(HK_Percentile_Complete[, var], each=500)),
xlab=names(HK_Percentile_Complete)[var],
ylab="Predicted T13 BMI Percentile")
var = 44
boxplot(BmiPreds ~ as.factor(rep(HK_Percentile_Complete[, var], each=500)),
xlab=names(HK_Percentile_Complete)[var],
ylab="Predicted T13 BMI Percentile")
plot(RFpred~HK_Percentile_Complete$T4_Percentile)
RFPred = as.numeric(predict(object=simpleRF, newdata=HK_Percentile_Complete))
RFPred
HK_Percentile_Complete$T4_Percentile
plot(RFpred~HK_Percentile_Complete$T4_Percentile)
RFPred = as.numeric(predict(object=simpleRF, newdata=HK_Percentile_Complete))
plot(RFPred~HK_Percentile_Complete$T4_Percentile)
varImpPlot(simpleRF)
plot(RFPred~HK_Percentile_Complete$T3HKQ18)
qplot(y = RFPred, x = HK_Percentile_Complete$T3HKQ18) + stat_smooth()
by(data = RFPred, INDICES = as.factor(HK_Percentile_Complete$T3HKQ18), median)
qplot(y = RFPred, x = HK_Percentile_Complete$T3HKQ18) + stat_smooth(method='lm')
qplot(y = RFPred, x = HK_Percentile_Complete$T3HKQ18) + stat_smooth(method='loess')
qplot(y = RFPred, x = HK_Percentile_Complete$T3HKQ18) + stat_smooth(method='gam')
qplot(y = RFPred, x = HK_Percentile_Complete$T3HKQ18) + stat_smooth(method='loess')
varImpPlot(simpleRF, n.var=10)
names(HK_Percentile_Complete)
var = 44
boxplot(BmiPreds ~ as.factor(rep(HK_Percentile_Complete[, var], each=500)),
xlab=names(HK_Percentile_Complete)[var],
ylab="Predicted T13 BMI Percentile")
HK_Percentile = HK_Percentile[,c(3:45, 182)]
load("~/Dropbox/School/RandomForest Paper/Data/HK_Percentile.RData")
keep(list="HK_Percentile", sure=TRUE)
HK_Percentile = HK_Percentile[,c(3:45, 182)]
HK_Percentile_Complete = na.omit(HK_Percentile)
designMat = model.matrix( ~ . -1 -T13_Percentile, data=HK_Percentile_Complete)
simpleRF = tuneRF(x = designMat, y=HK_Percentile_Complete$T13_Percentile, doBest=TRUE)
RFPred = as.numeric(predict(object=simpleRF, newdata=HK_Percentile_Complete))
varImpPlot(simpleRF)
varImpPlot(simpleRF, n.var = 7)
RFPred = as.numeric(predict(object=simpleRF, newdata=HK_Percentile_Complete))
qplot(y = RFPred, x = HK_Percentile_Complete$T3HKQ18) + stat_smooth(method='loess')
RFPred
cbind(RFPred, HK_Percentile_Complete$T13_Percentile)
plot(RFPred~ HK_Percentile_Complete$T13_Percentile)
abline(a = 1)
abline(a = 1, b=0)
abline(a =0, b=1)
load("~/Dropbox/School/RandomForest Paper/Data/HK_Percentile.RData")
keep(list="HK_Percentile", sure=TRUE)
names(HK_Percentile)
HK_Percentile = HK_Percentile[,c(3:45, 179, 182)]
HK_Percentile_Complete = na.omit(HK_Percentile)
# write.csv(HK_Percentile_Complete, file="HK_Percentile_Complete.csv")
designMat = model.matrix( ~ . -1 -T13_Percentile, data=HK_Percentile_Complete)
simpleRF = tuneRF(x = designMat, y=HK_Percentile_Complete$T13_Percentile, doBest=TRUE)
RFPred = as.numeric(predict(object=simpleRF, newdata=HK_Percentile_Complete))
plot(RFPred~ HK_Percentile_Complete$T13_Percentile)
abline(a =0, b=1)
